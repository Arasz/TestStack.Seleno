
todo document these breaking changes:
*	Remove WithPatience from Execute()
*	Renamed SelenoApplicationRunner to SelenoHost
*	Can't new-up page objects anymore
*	Changed ElementWithWait to Element
*	Changed TryFindElement with OptionalElement
*	Changed the default maximum wait in seconds from 20s to 5s and removed the default value from the ElementWithWait extension method
*	Removed ActionOnLocator(Func) from Execute()
*	Renamed IScriptExecutor to IExecutor
*	Bunch of implementation classes now marked internal

Version 0.4
-----------
Removed the following extension methods from IWebElement:

* ClearAndSendKeys
* SetAttribute
* ReplaceInputValueWith
* GetAttributeAsType
* GetValueFromTextBox
* TextAsType

Reason
======
We are trying to move away from exposing Selenium interfaces and classes in our public API so that we can provide a driver agnostic API for you to use. This gives us flexibility in the future to support other drivers e.g. Phantom etc.

Fix
===
* ClearAndSendKeys
	* If you are inside a typed page object (e.g. extending Page<TModel>) then replace with Input().ClearAndSendKeys(...) [there are two overloads]
	* Otherwise simply replace with element.Clear(); element.SendKeys(...);
	* Alternatively, you can use the new HtmlControl support (e.g. HtmlControlFor<TextBox>()...) or the Input().ReplaceInputValueWith(...)
* SetAttribute
	* If you are inside a typed page object (e.g. extending Page<TModel>) then replace with Input().SetAttribute(...)
* ReplaceInputValueWith
	* If you are inside a typed page object (e.g. extending Page<TModel>) then replace with Input().ReplaceInputValueWith(...)
* GetAttributeAsType
	* If you are inside a typed page object (e.g. extending Page<TModel>) then replace with Read().GetAttributeAsType(...)
* GetValueFromTextBox
	* If you are inside a typed page object (e.g. extending Page<TModel>) then replace with Read().GetValueFromTextBox(...)
* TextAsType
	* If you are inside a typed page object (e.g. extending Page<TModel>) then replace with Read().TextAsType(...)
